{
  "address": "0x81f273Ee0a660CdFdbA32Ca31d0Bca22c02565a3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "registedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "NodeStakingPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getCreatedPoolsByToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getCreatedPoolsLengthByToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stakeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lockupDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawPeriod",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardDistributor",
          "type": "address"
        }
      ],
      "name": "registerPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7a70ef8bf04212c28d4d925ea54cfeea22970f8b8386bd5cd2501f27bad645f",
  "receipt": {
    "to": null,
    "from": "0xB1B11E04348f4271B163dB51138704F3Dec0c128",
    "contractAddress": "0x81f273Ee0a660CdFdbA32Ca31d0Bca22c02565a3",
    "transactionIndex": 2,
    "gasUsed": "3054934",
    "logsBloom": "0x
    "blockHash": "0xdd18b73f580f969ec994e37141cc5ad7630105b24838ce0da177849546113b62",
    "transactionHash": "0xd7a70ef8bf04212c28d4d925ea54cfeea22970f8b8386bd5cd2501f27bad645f",
    "logs": [],
    "blockNumber": 20875173,
    "cumulativeGasUsed": "6117460",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "356b15c62ddc5da162b7cec49404f5f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"NodeStakingPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getCreatedPoolsByToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getCreatedPoolsLengthByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardDistributor\",\"type\":\"address\"}],\"name\":\"registerPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allPoolsLength()\":{\"returns\":{\"_0\":\"Return number of created pools\"}},\"getCreatedPoolsByToken(address,address)\":{\"details\":\"User can retrieve their created pool by address of tokens\",\"params\":{\"_creator\":\"Address of created pool user\",\"_token\":\"Address of token want to query\"},\"returns\":{\"_0\":\"Created NodeStakingPool Address\"}},\"getCreatedPoolsLengthByToken(address,address)\":{\"params\":{\"_creator\":\"Address of created pool user\",\"_token\":\"Address of token want to query\"},\"returns\":{\"_0\":\"Return number of created pool\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"registerPool(string,string,address,uint256,uint256,uint256,address,uint256,uint256,address)\":{\"details\":\"To register, you MUST have an ERC20 token\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allPoolsLength()\":{\"notice\":\"Get the number of all created pools\"},\"getCreatedPoolsByToken(address,address)\":{\"notice\":\"Get the created pools by token address\"},\"getCreatedPoolsLengthByToken(address,address)\":{\"notice\":\"Retrieve number of pools created for specific token\"},\"pause()\":{\"notice\":\"Pause contract\"},\"registerPool(string,string,address,uint256,uint256,uint256,address,uint256,uint256,address)\":{\"notice\":\"Register NodeStakingPool for tokens\"},\"unpause()\":{\"notice\":\"Unpause contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NodeStakingFactory.sol\":\"NodeStakingPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xb92541cd02568981bc3dac94060d542ab3231d8f30ade82aeba0588761c1b649\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xa8eded8062871a4b146c437c8e0e5ba96b1fec87c9f303a461a727b3fd5856d9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"contracts/NodeStaking.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract NodeStakingPool is Initializable, OwnableUpgradeable, PausableUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using SafeCastUpgradeable for uint256;\\n\\n    uint256 private constant ACCUMULATED_MULTIPLIER = 1e12;\\n\\n    // Info of each user + id.\\n    struct NodeStakingUserInfo {\\n        uint256 stakeTime; // next reward block\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 pendingReward; // Reward but not harvest\\n        // TODO: if switch from 1 to 0, transfer reward to user before set stakeTime to 0\\n        // bool status; // 0: inactive, 1: active\\n\\n        //   pending reward = (user.amount * accRewardPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a  Here's what happens:\\n        //   1. The pool's `accRewardPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n    IERC20 public stakeToken; // Address of LP token contract.\\n    uint256 public stakeTokenSupply; // Total lp tokens deposited to this\\n    uint256 public totalRunningNode; // Total lp tokens deposited to this\\n    uint256 public lastRewardBlock; // Last block number that rewards distribution occurs.\\n    uint256 public accRewardPerShare; // Accumulated rewards per share, times 1e12. See below.\\n    uint256 public requireStakeAmount; // stake amount need for user to run node\\n\\n    struct LockWithdrawReward {\\n        uint256 reward;\\n        uint256 applicableAt;\\n    }\\n\\n    string public name;\\n    string public symbol;\\n    // The reward token!\\n    IERC20 public rewardToken;\\n    // Total rewards for each block.\\n    uint256 public rewardPerBlock;\\n    // The reward distribution address\\n    address public rewardDistributor;\\n    // Info of each user that stakes LP tokens.\\n    mapping(address => mapping(uint256 => NodeStakingUserInfo)) public userInfo;\\n    // The block number when rewards mining starts.\\n    uint256 public startBlockNumber;\\n    // The block number when rewards mining ends.\\n    uint256 public endBlockNumber;\\n    // withdraw period\\n    uint256 public withdrawPeriod;\\n    // withdraw period\\n    uint256 public lockupDuration;\\n    // the weight of provider to earn reward\\n    mapping(address => uint256) public userRunningNode;\\n    mapping(address => uint256) public userNodeCount;\\n    // pending reward in withdraw period\\n    mapping(address => mapping(uint256 => LockWithdrawReward)) public pendingRewardInWithdrawPeriod;\\n\\n    event NodeStakingDeposit(address user, uint256 amount, uint256 userNodeId);\\n    event NodeStakingEnableAddress(address user, uint256 userNodeId);\\n    event NodeStakingDisableAddress(address user, uint256 userNodeId);\\n    event NodeStakingWithdraw(address user, uint256 amount);\\n    event NodeStakingRewardsHarvested(address user, uint256 amount);\\n    event SetRequireStakeAmount(uint256 amount);\\n    event SetEndBlock(uint256 block);\\n    event SetRewardDistributor(address rewardDistributor);\\n    event SetRewardPerBlock(uint256 rewardPerBlock);\\n    event SetPoolInfor(\\n        uint256 rewardPerBlock,\\n        uint256 endBlock,\\n        uint256 lockupDuration,\\n        uint256 withdrawPeriod,\\n        address rewardDistributor\\n    );\\n\\n    /**\\n     * @notice Initialize the contract, get called in the first time deploy\\n     * @param _rewardToken the reward token address\\n     * @param _rewardPerBlock the number of reward tokens that got unlocked each block\\n     * @param _startBlock the block number when farming start\\n     */\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        IERC20 _rewardToken,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        IERC20 _stakeToken,\\n        address _rewardDistributor,\\n        uint256 _lockupDuration,\\n        uint256 _withdrawPeriod\\n    ) external initializer {\\n        __Ownable_init();\\n        transferOwnership(tx.origin);\\n        require(address(_rewardToken) != address(0), \\\"NodeStakingPool: invalid reward token address\\\");\\n        require(_startBlock < _endBlock, \\\"NodeStakingPool: invalid start block or end block\\\");\\n        require(_lockupDuration > 0, \\\"NodeStakingPool: lockupDuration must be gt 0\\\");\\n        require(_withdrawPeriod > 0, \\\"NodeStakingPool: withdrawPeriod must be gt 0\\\");\\n\\n        name = _name;\\n        symbol = _symbol;\\n        rewardToken = _rewardToken;\\n        rewardPerBlock = _rewardPerBlock;\\n        startBlockNumber = _startBlock;\\n        endBlockNumber = _endBlock;\\n        lockupDuration = _lockupDuration;\\n        withdrawPeriod = _withdrawPeriod;\\n        rewardDistributor = _rewardDistributor;\\n\\n        lastRewardBlock = block.number > startBlockNumber ? block.number : startBlockNumber;\\n        stakeToken = _stakeToken;\\n        stakeTokenSupply = 0;\\n        totalRunningNode = 0;\\n        requireStakeAmount = 0;\\n        accRewardPerShare = 0;\\n        updatePool();\\n    }\\n\\n    /**\\n     * @notice Pause contract\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause contract\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Set require stake amount\\n     * @param _requireStakeAmount amount want to set\\n     */\\n    function setRequireStakeAmount(uint256 _requireStakeAmount) external onlyOwner {\\n        requireStakeAmount = _requireStakeAmount;\\n        emit SetRequireStakeAmount(_requireStakeAmount);\\n    }\\n\\n    /**\\n     * @notice Set the reward distributor. Can only be called by the owner.\\n     * @param _rewardDistributor the reward distributor\\n     */\\n    function setRewardDistributor(address _rewardDistributor) external onlyOwner {\\n        require(_rewardDistributor != address(0), \\\"NodeStakingPool: invalid reward distributor\\\");\\n        rewardDistributor = _rewardDistributor;\\n        emit SetRewardDistributor(_rewardDistributor);\\n    }\\n\\n    function setPoolInfor(\\n        uint256 _rewardPerBlock,\\n        uint256 _endBlock,\\n        uint256 _lockupDuration,\\n        uint256 _withdrawPeriod,\\n        address _rewardDistributor\\n    ) external onlyOwner {\\n        require(_endBlock > block.number, \\\"NodeStakingPool: end block must be gt block.number\\\");\\n        require(_lockupDuration > 0, \\\"NodeStakingPool: lockupDuration must be gt 0\\\");\\n        require(_withdrawPeriod > 0, \\\"NodeStakingPool: withdrawPeriod must be gt 0\\\");\\n\\n        updatePool();\\n\\n        rewardPerBlock = _rewardPerBlock;\\n        endBlockNumber = _endBlock;\\n        lockupDuration = _lockupDuration;\\n        withdrawPeriod = _withdrawPeriod;\\n        rewardDistributor = _rewardDistributor;\\n\\n        emit SetPoolInfor(_rewardPerBlock, _endBlock, _lockupDuration, _withdrawPeriod, _rewardDistributor);\\n    }\\n\\n    function setRewardPerBlock(uint256 _rewardPerBlock) external {\\n        updatePool();\\n        rewardPerBlock = _rewardPerBlock;\\n\\n        emit SetRewardPerBlock(_rewardPerBlock);\\n    }\\n\\n    /**\\n     * @notice Set the end block number. Can only be called by the owner.\\n     */\\n    function setEndBlock(uint256 _endBlockNumber) external onlyOwner {\\n        require(_endBlockNumber > block.number, \\\"NodeStakingPool: invalid reward distributor\\\");\\n        endBlockNumber = _endBlockNumber;\\n        emit SetEndBlock(_endBlockNumber);\\n    }\\n\\n    /**\\n     * @notice Return time multiplier over the given _from to _to block.\\n     * @param _from the number of starting block\\n     * @param _to the number of ending block\\n     */\\n    function timeMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        if (endBlockNumber > 0 && _to > endBlockNumber) {\\n            return endBlockNumber > _from ? endBlockNumber - _from : 0;\\n        }\\n        return _to - _from;\\n    }\\n\\n    /**\\n     * @notice View function to see pending rewards on frontend.\\n     * @param _user the address of the user\\n     */\\n    function pendingReward(address _user, uint256 _nodeId) public view returns (uint256) {\\n        NodeStakingUserInfo storage user = userInfo[_user][_nodeId];\\n\\n        // TODO: reward debt = accRewardPerShare before\\n        uint256 _accRewardPerShare = accRewardPerShare;\\n        if (user.stakeTime > 0 && block.number > lastRewardBlock && totalRunningNode != 0) {\\n            uint256 multiplier = timeMultiplier(lastRewardBlock, block.number);\\n            uint256 poolReward = multiplier * rewardPerBlock;\\n            _accRewardPerShare = _accRewardPerShare + ((poolReward * ACCUMULATED_MULTIPLIER) / totalRunningNode);\\n        }\\n        return user.pendingReward + ((_accRewardPerShare / ACCUMULATED_MULTIPLIER) - user.rewardDebt);\\n    }\\n\\n    /**\\n     * @notice Update reward variables of the given pool to be up-to-date.\\n     */\\n    function updatePool() public {\\n        if (block.number <= lastRewardBlock) {\\n            return;\\n        }\\n        if (totalRunningNode == 0) {\\n            lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = timeMultiplier(lastRewardBlock, block.number);\\n        uint256 poolReward = multiplier * rewardPerBlock;\\n        // TODO: stakeTokenSupply or count*requireAmount\\n        accRewardPerShare = (accRewardPerShare + ((poolReward * ACCUMULATED_MULTIPLIER) / (totalRunningNode)));\\n        lastRewardBlock = block.number;\\n    }\\n\\n    /**\\n     * @notice Deposit LP tokens to the farm for reward allocation.\\n     */\\n    function deposit() external {\\n        uint256 _amount = requireStakeAmount;\\n\\n        uint256 index = userNodeCount[msg.sender]++;\\n        NodeStakingUserInfo storage user = userInfo[msg.sender][index];\\n        // if admin enable staking record, stakeTime will be update\\n        // user.stakeTime = block.number;\\n        user.amount = _amount;\\n        stakeTokenSupply = stakeTokenSupply + _amount;\\n        stakeToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n        emit NodeStakingDeposit(msg.sender, _amount, index);\\n    }\\n\\n    // TODO: set pool\\n    function setPool() external {}\\n\\n    function enableAddress(address _user, uint256 _nodeId) external onlyOwner {\\n        NodeStakingUserInfo storage user = userInfo[_user][_nodeId];\\n\\n        require(user.stakeTime == 0, \\\"NodeStakingPool: node already enabled\\\");\\n        updatePool();\\n\\n        user.stakeTime = block.number;\\n        userRunningNode[_user] = userRunningNode[_user] + 1;\\n        totalRunningNode = totalRunningNode + 1;\\n\\n        emit NodeStakingEnableAddress(msg.sender, _nodeId);\\n    }\\n\\n    function disableAddress(address _user, uint256 _nodeId) external onlyOwner {\\n        NodeStakingUserInfo storage user = userInfo[_user][_nodeId];\\n\\n        require(user.stakeTime > 0, \\\"NodeStakingPool: node already disabled\\\");\\n        // require(isInWithdrawTime(user.stakeTime), \\\"NodeStakingPool: not in withdraw time\\\");\\n        updatePool();\\n        if (user.stakeTime > 0) {\\n            uint256 pending = ((accRewardPerShare) / ACCUMULATED_MULTIPLIER) - user.rewardDebt;\\n\\n            if (pending > 0) {\\n                user.pendingReward = user.pendingReward + pending;\\n            }\\n        }\\n        user.stakeTime = 0;\\n        user.rewardDebt = (accRewardPerShare) / ACCUMULATED_MULTIPLIER;\\n        totalRunningNode = totalRunningNode - 1;\\n        userRunningNode[_user] = userRunningNode[_user] - 1;\\n    }\\n\\n    /**\\n     * @notice Withdraw LP tokens from\\n     * @param _nodeId nodeId to withdraw\\n     * @param _harvestReward whether the user want to claim the rewards or not\\n     */\\n    function withdraw(uint256 _nodeId, bool _harvestReward) external {\\n        NodeStakingUserInfo storage user = userInfo[msg.sender][_nodeId];\\n        require(isInWithdrawTime(user.stakeTime), \\\"NodeStakingPool: not in withdraw time\\\");\\n        require(user.amount > 0, \\\"NodeStakingPool: have not any token to withdraw\\\");\\n\\n        uint256 amount = user.amount;\\n\\n        _withdraw(_nodeId, _harvestReward);\\n\\n        stakeToken.safeTransfer(address(msg.sender), amount);\\n        emit NodeStakingWithdraw(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Harvest proceeds msg.sender\\n     */\\n    function claimReward(uint256 _nodeId) public returns (uint256) {\\n        uint256 multiplier = timeMultiplier(lastRewardBlock, block.number);\\n\\n        updatePool();\\n        NodeStakingUserInfo storage user = userInfo[msg.sender][_nodeId];\\n        uint256 totalPending = pendingReward(msg.sender, _nodeId);\\n\\n        user.pendingReward = 0;\\n        user.rewardDebt = (accRewardPerShare) / (ACCUMULATED_MULTIPLIER);\\n\\n        uint256 lockReward = _getWithdrawPendingReward(_nodeId, multiplier, totalPending);\\n        if (totalPending > 0) {\\n            safeRewardTransfer(msg.sender, totalPending - lockReward);\\n        }\\n\\n        // TODO: claim pending reward in withdraw time\\n        LockWithdrawReward storage record = pendingRewardInWithdrawPeriod[msg.sender][_nodeId];\\n        if (record.applicableAt > block.number) {\\n            safeRewardTransfer(msg.sender, record.reward);\\n            record.reward = 0;\\n        }\\n\\n        if (lockReward > 0) {\\n            // TODO: next locking time\\n            record.applicableAt = getNextStartLockingTime(user.stakeTime);\\n            record.reward += lockReward;\\n\\n            if (record.applicableAt <= block.number) {\\n                safeRewardTransfer(msg.sender, record.reward);\\n                record.reward = 0;\\n            }\\n        }\\n        emit NodeStakingRewardsHarvested(msg.sender, totalPending);\\n        return totalPending;\\n    }\\n\\n    /**\\n     * @notice Withdraw LP tokens from\\n     * @param _nodeId nodeId to withdraw\\n     * @param _harvestReward whether the user want to claim the rewards or not\\n     */\\n    function _withdraw(uint256 _nodeId, bool _harvestReward) private {\\n        NodeStakingUserInfo storage user = userInfo[msg.sender][_nodeId];\\n        uint256 _amount = user.amount;\\n        // require(isInWithdrawTime(user.stakeTime), \\\"NodeStakingPool: not in withdraw time\\\");\\n\\n        if (_harvestReward) {\\n            claimReward(_nodeId);\\n        } else {\\n            updatePool();\\n            // user have stake time = user deposited\\n            if (user.stakeTime > 0) {\\n                uint256 pending = ((accRewardPerShare) / ACCUMULATED_MULTIPLIER) - user.rewardDebt;\\n                if (pending > 0) {\\n                    user.pendingReward = user.pendingReward + pending;\\n                }\\n            }\\n        }\\n        user.amount = 0;\\n        user.stakeTime = 0;\\n        user.rewardDebt = (accRewardPerShare) / ACCUMULATED_MULTIPLIER;\\n        stakeTokenSupply = stakeTokenSupply - _amount;\\n    }\\n\\n    function isInWithdrawTime(uint256 _startTime) public view returns (bool) {\\n        uint256 duration = block.number - _startTime;\\n        // tmp is the times that done lockupDuration\\n        uint256 tmp = duration / (lockupDuration + withdrawPeriod);\\n        uint256 currentTime = duration - tmp * (lockupDuration + withdrawPeriod);\\n\\n        return currentTime >= lockupDuration;\\n    }\\n\\n    function getNextStartLockingTime(uint256 _startTime) public view returns (uint256) {\\n        if (_startTime == 0) return block.number;\\n        console.log(\\\"\\\\x1b[36m%s\\\\x1b[0m\\\", \\\"block.number\\\", block.number);\\n        console.log(\\\"\\\\x1b[36m%s\\\\x1b[0m\\\", \\\"_startTime\\\", _startTime);\\n        uint256 duration = block.number - _startTime;\\n        // multiplier is the times that done lockupDuration\\n        console.log(\\\"\\\\x1b[36m%s\\\\x1b[0m\\\", \\\"lockupDuration\\\", lockupDuration);\\n        console.log(\\\"\\\\x1b[36m%s\\\\x1b[0m\\\", \\\"withdrawPeriod\\\", withdrawPeriod);\\n        uint256 multiplier = duration / (lockupDuration + withdrawPeriod);\\n        console.log(\\\"\\\\x1b[36m%s\\\\x1b[0m\\\", \\\"multiplier\\\", multiplier);\\n\\n        return _startTime + (multiplier + 1) * (lockupDuration + withdrawPeriod);\\n    }\\n\\n    /**\\n     * @notice Safe reward transfer function, just in case if reward distributor dose not have enough reward tokens.\\n     * @param _to address of the receiver\\n     * @param _amount amount of the reward token\\n     */\\n    function safeRewardTransfer(address _to, uint256 _amount) internal {\\n        uint256 bal = rewardToken.balanceOf(rewardDistributor);\\n\\n        require(_amount <= bal, \\\"NodeStakingPool: not enough reward token\\\");\\n\\n        rewardToken.safeTransferFrom(rewardDistributor, _to, _amount);\\n    }\\n\\n    // TODO: l\\u01b0\\u1ee3ng reward trong withdraw period\\n    function _getWithdrawPendingReward(\\n        uint256 _nodeId,\\n        uint256 _totalStakeTime,\\n        uint256 _totalReward\\n    ) private returns (uint256) {\\n        require(_totalStakeTime > 0, \\\"NodeStakingPool: stake time must be greater than 0\\\");\\n\\n        NodeStakingUserInfo storage user = userInfo[msg.sender][_nodeId];\\n        require(user.stakeTime > 0, \\\"NodeStakingPool: NodeStakingPool: node already disabled\\\");\\n\\n        bool isInWithdrawTime = isInWithdrawTime(user.stakeTime);\\n        if (!isInWithdrawTime) {\\n            return 0;\\n        }\\n\\n        // get time in withdraw period\\n        uint256 nextLockingTime = getNextStartLockingTime(user.stakeTime);\\n        console.log(\\\"\\\\x1b[36m%s\\\\x1b[0m\\\", \\\"withdrawPeriod\\\", withdrawPeriod);\\n        console.log(\\\"\\\\x1b[36m%s\\\\x1b[0m\\\", \\\"nextLockingTime\\\", nextLockingTime);\\n        console.log(\\\"\\\\x1b[36m%s\\\\x1b[0m\\\", \\\"block.number\\\", block.number);\\n        uint256 duration = withdrawPeriod - (nextLockingTime - block.number);\\n\\n        uint256 reward = (duration * _totalReward) / _totalStakeTime;\\n\\n        return reward;\\n    }\\n}\\n\",\"keccak256\":\"0xb9ef183464d9adab1cb25fec93b4c7458f56d3dc27cfc36b8e8cc08d9d14d5aa\",\"license\":\"MIT\"},\"contracts/NodeStakingFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./NodeStaking.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\n\\ncontract NodeStakingPoolFactory is Initializable, OwnableUpgradeable, PausableUpgradeable {\\n    // Array of created Pools Address\\n    address[] public allPools;\\n    // Mapping from User token. From tokens to array of created Pools for token\\n    mapping(address => mapping(address => address[])) public getPools;\\n    event NodeStakingPoolCreated(\\n        address registedBy,\\n        string name,\\n        string symbol,\\n        address rewardToken,\\n        address stakeToken,\\n        address pool,\\n        uint256 poolId\\n    );\\n\\n    function initialize() external initializer {\\n        __Ownable_init();\\n    }\\n\\n    /**\\n     * @notice Pause contract\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause contract\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Get the number of all created pools\\n     * @return Return number of created pools\\n     */\\n    function allPoolsLength() public view returns (uint256) {\\n        return allPools.length;\\n    }\\n\\n    /**\\n     * @notice Get the created pools by token address\\n     * @dev User can retrieve their created pool by address of tokens\\n     * @param _creator Address of created pool user\\n     * @param _token Address of token want to query\\n     * @return Created NodeStakingPool Address\\n     */\\n    function getCreatedPoolsByToken(address _creator, address _token) public view returns (address[] memory) {\\n        return getPools[_creator][_token];\\n    }\\n\\n    /**\\n     * @notice Retrieve number of pools created for specific token\\n     * @param _creator Address of created pool user\\n     * @param _token Address of token want to query\\n     * @return Return number of created pool\\n     */\\n    function getCreatedPoolsLengthByToken(address _creator, address _token) public view returns (uint256) {\\n        return getPools[_creator][_token].length;\\n    }\\n\\n    /**\\n     * @notice Register NodeStakingPool for tokens\\n     * @dev To register, you MUST have an ERC20 token\\n     */\\n    function registerPool(\\n        string memory _name,\\n        string memory _symbol,\\n        address _rewardToken,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        address _stakeToken,\\n        uint256 _lockupDuration,\\n        uint256 _withdrawPeriod,\\n        address _rewardDistributor\\n    ) external whenNotPaused returns (address pool) {\\n        require(_stakeToken != address(0), \\\"NodeStakingPoolFactory: not allow zero address\\\");\\n        require(_rewardToken != address(0), \\\"NodeStakingPoolFactory: not allow zero address\\\");\\n\\n        bytes memory bytecode = type(NodeStakingPool).creationCode;\\n        uint256 tokenIndex = getCreatedPoolsLengthByToken(msg.sender, _rewardToken);\\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender, _rewardToken, tokenIndex));\\n        assembly {\\n            pool := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IPool(pool).initialize(\\n            _name,\\n            _symbol,\\n            IERC20(_rewardToken),\\n            _rewardPerBlock,\\n            _startBlock,\\n            _endBlock,\\n            IERC20(_stakeToken),\\n            _lockupDuration,\\n            _withdrawPeriod,\\n            _rewardDistributor\\n        );\\n        getPools[msg.sender][_rewardToken].push(pool);\\n        allPools.push(pool);\\n        emit NodeStakingPoolCreated(msg.sender, _name, _symbol, _rewardToken, _stakeToken, pool, allPools.length - 1);\\n    }\\n}\\n\",\"keccak256\":\"0xe83d9951e66bb54d70b786e88addf11f4ac5b962ad18586425669f400d8edb13\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPool {\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        IERC20 _rewardToken,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        IERC20 _stakeToken,\\n        uint256 _lockupDuration,\\n        uint256 _withdrawPeriod,\\n        address _rewardDistributor\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb18a1f01a217b14dc939639b463a5655338832fe41a74f9329b1326fc020ba27\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061364c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638129fc1c1161008c578063ae7a774b11610066578063ae7a774b146101a7578063d238d82a146101c7578063efde4e64146101da578063f2fde38b146101e257600080fd5b80638129fc1c146101865780638456cb591461018e5780638da5cb5b1461019657600080fd5b80633f4ba83a146100d457806341d1de97146100de5780635c975abb1461010e578063715018a61461012457806375a466641461012c5780637fd376091461013f575b600080fd5b6100dc6101f5565b005b6100f16100ec366004610a23565b610232565b6040516001600160a01b0390911681526020015b60405180910390f35b60655460ff166040519015158152602001610105565b6100dc61025c565b6100f161013a366004610a58565b610290565b61017861014d366004610a94565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b604051908152602001610105565b6100dc6102d5565b6100dc610349565b6033546001600160a01b03166100f1565b6101ba6101b5366004610a94565b61037b565b6040516101059190610ac7565b6100f16101d5366004610bb7565b6103fe565b609754610178565b6100dc6101f0366004610c7f565b6106ed565b6033546001600160a01b031633146102285760405162461bcd60e51b815260040161021f90610ca1565b60405180910390fd5b610230610785565b565b6097818154811061024257600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b031633146102865760405162461bcd60e51b815260040161021f90610ca1565b6102306000610818565b609860205282600052604060002060205281600052604060002081815481106102b857600080fd5b6000918252602090912001546001600160a01b0316925083915050565b600054610100900460ff16806102ee575060005460ff16155b61030a5760405162461bcd60e51b815260040161021f90610cd6565b600054610100900460ff1615801561032c576000805461ffff19166101011790555b61033461086a565b8015610346576000805461ff00191690555b50565b6033546001600160a01b031633146103735760405162461bcd60e51b815260040161021f90610ca1565b6102306108d1565b6001600160a01b0380831660009081526098602090815260408083209385168352928152908290208054835181840281018401909452808452606093928301828280156103f157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103d3575b5050505050905092915050565b600061040c60655460ff1690565b1561044c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161021f565b6001600160a01b0385166104725760405162461bcd60e51b815260040161021f90610d24565b6001600160a01b0389166104985760405162461bcd60e51b815260040161021f90610d24565b6000604051806020016104aa90610a16565b601f1982820381018352601f909101166040908152336000908152609860209081528282206001600160a01b038f168352905290812054919250906040516bffffffffffffffffffffffff1933606090811b821660208401528e901b16603482015260488101829052909150600090606801604051602081830303815290604052805190602001209050808351602085016000f59350836001600160a01b031663438491e78f8f8f8f8f8f8f8f8f8f6040518b63ffffffff1660e01b815260040161057e9a99989796959493929190610dbf565b600060405180830381600087803b15801561059857600080fd5b505af11580156105ac573d6000803e3d6000fd5b5050505060986000336001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b031602179055506097849080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b031602179055507fff8439967133b164db4c57586583a2881ff16a2c0046a9bc709f0ff6a9805d02338f8f8f8c8960016097805490506106c19190610e37565b6040516106d49796959493929190610e5c565b60405180910390a15050509a9950505050505050505050565b6033546001600160a01b031633146107175760405162461bcd60e51b815260040161021f90610ca1565b6001600160a01b03811661077c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161021f565b61034681610818565b60655460ff166107ce5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161021f565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680610883575060005460ff16155b61089f5760405162461bcd60e51b815260040161021f90610cd6565b600054610100900460ff161580156108c1576000805461ffff19166101011790555b6108c961094c565b6103346109b6565b60655460ff16156109175760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161021f565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586107fb3390565b600054610100900460ff1680610965575060005460ff16155b6109815760405162461bcd60e51b815260040161021f90610cd6565b600054610100900460ff16158015610334576000805461ffff19166101011790558015610346576000805461ff001916905550565b600054610100900460ff16806109cf575060005460ff16155b6109eb5760405162461bcd60e51b815260040161021f90610cd6565b600054610100900460ff16158015610a0d576000805461ffff19166101011790555b61033433610818565b61276080610eb783390190565b600060208284031215610a3557600080fd5b5035919050565b80356001600160a01b0381168114610a5357600080fd5b919050565b600080600060608486031215610a6d57600080fd5b610a7684610a3c565b9250610a8460208501610a3c565b9150604084013590509250925092565b60008060408385031215610aa757600080fd5b610ab083610a3c565b9150610abe60208401610a3c565b90509250929050565b6020808252825182820181905260009190848201906040850190845b81811015610b085783516001600160a01b031683529284019291840191600101610ae3565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610b3b57600080fd5b813567ffffffffffffffff80821115610b5657610b56610b14565b604051601f8301601f19908116603f01168101908282118183101715610b7e57610b7e610b14565b81604052838152866020858801011115610b9757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806000806000806000806101408b8d031215610bd757600080fd5b8a3567ffffffffffffffff80821115610bef57600080fd5b610bfb8e838f01610b2a565b9b5060208d0135915080821115610c1157600080fd5b50610c1e8d828e01610b2a565b995050610c2d60408c01610a3c565b975060608b0135965060808b0135955060a08b01359450610c5060c08c01610a3c565b935060e08b013592506101008b01359150610c6e6101208c01610a3c565b90509295989b9194979a5092959850565b600060208284031215610c9157600080fd5b610c9a82610a3c565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602e908201527f4e6f64655374616b696e67506f6f6c466163746f72793a206e6f7420616c6c6f60408201526d77207a65726f206164647265737360901b606082015260800190565b6000815180845260005b81811015610d9857602081850181015186830182015201610d7c565b81811115610daa576000602083870101525b50601f01601f19169290920160200192915050565b6000610140808352610dd38184018e610d72565b90508281036020840152610de7818d610d72565b6001600160a01b039b8c166040850152606084019a909a525050608081019690965260a086019490945291861660c085015260e08401526101008301529092166101209092019190915292915050565b600082821015610e5757634e487b7160e01b600052601160045260246000fd5b500390565b600060018060a01b03808a16835260e06020840152610e7e60e084018a610d72565b8381036040850152610e90818a610d72565b9782166060850152509485166080830152509190921660a082015260c00152939250505056fe608060405234801561001057600080fd5b50612740806100206000396000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c80638ae39cac11610146578063b4569228116100c3578063e2c0fa9811610087578063e2c0fa981461052e578063e3161ddd1461054e578063ec4ed27314610556578063f2fde38b1461055f578063f430cf0d14610572578063f7c618c11461058557600080fd5b8063b4569228146104e4578063b4999e85146104f7578063bb872b4a14610500578063c713aa9414610513578063d0e30db01461052657600080fd5b8063a9f8d1811161010a578063a9f8d1811461048f578063aa55609514610498578063acc2166a146104ab578063ae169a50146104be578063b39426a1146104d157600080fd5b80638ae39cac146104515780638da5cb5b1461045a578063939d62371461046b57806395d89b4114610474578063a1809b951461047c57600080fd5b806338d07436116101df57806351ed6a30116101a357806351ed6a30146103ec5780635c975abb14610417578063633bc8bd1461042e578063715018a614610441578063771ff381146103465780638456cb591461044957600080fd5b806338d074361461036e5780633e5a9b11146103815780633f4ba83a146103c85780634774be74146103d0578063498a4c2d146103e357600080fd5b8063215f9baa11610226578063215f9baa146102b357806321ce919d146102d3578063243b442614610333578063251ea859146103485780632b2739e61461035b57600080fd5b806306fdde031461026357806310c640b81461028157806312eb4f9a146102985780631310dce9146102a15780631ada70a8146102aa575b600080fd5b61026b610598565b604051610278919061218e565b60405180910390f35b61028a60985481565b604051908152602001610278565b61028a60a55481565b61028a60995481565b61028a60a65481565b61028a6102c13660046121c6565b60a86020526000908152604090205481565b6103136102e13660046121e3565b60a260209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610278565b61034661034136600461220f565b610626565b005b6103466103563660046122cb565b610695565b6103466103693660046121e3565b6108ed565b61034661037c3660046123a1565b610a5e565b6103b361038f3660046121e3565b60a96020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610278565b610346610bae565b6103466103de3660046123d1565b610be2565b61028a60a35481565b6097546103ff906001600160a01b031681565b6040516001600160a01b039091168152602001610278565b60655460ff165b6040519015158152602001610278565b61041e61043c36600461220f565b610d45565b610346610da6565b610346610dda565b61028a60a05481565b6033546001600160a01b03166103ff565b61028a609b5481565b61026b610e0c565b61034661048a3660046121c6565b610e19565b61028a609a5481565b61028a6104a636600461241e565b610eb7565b60a1546103ff906001600160a01b031681565b61028a6104cc36600461220f565b610f08565b61028a6104df36600461220f565b61105a565b6103466104f23660046121e3565b611269565b61028a60a45481565b61034661050e36600461220f565b6113ab565b61034661052136600461220f565b6113e8565b610346611466565b61028a61053c3660046121c6565b60a76020526000908152604090205481565b610346611515565b61028a609c5481565b61034661056d3660046121c6565b611584565b61028a6105803660046121e3565b61161f565b609f546103ff906001600160a01b031681565b609d80546105a590612440565b80601f01602080910402602001604051908101604052809291908181526020018280546105d190612440565b801561061e5780601f106105f35761010080835404028352916020019161061e565b820191906000526020600020905b81548152906001019060200180831161060157829003601f168201915b505050505081565b6033546001600160a01b031633146106595760405162461bcd60e51b81526004016106509061247b565b60405180910390fd5b609c8190556040518181527fb3ec819eca7ad857fe0ac22af97db0cf5710cc80aa43f6c10cb8d7e96f30ff27906020015b60405180910390a150565b600054610100900460ff16806106ae575060005460ff16155b6106ca5760405162461bcd60e51b8152600401610650906124b0565b600054610100900460ff161580156106ec576000805461ffff19166101011790555b6106f46116ec565b6106fd32611584565b6001600160a01b0389166107695760405162461bcd60e51b815260206004820152602d60248201527f4e6f64655374616b696e67506f6f6c3a20696e76616c6964207265776172642060448201526c746f6b656e206164647265737360981b6064820152608401610650565b8587106107d25760405162461bcd60e51b815260206004820152603160248201527f4e6f64655374616b696e67506f6f6c3a20696e76616c696420737461727420626044820152706c6f636b206f7220656e6420626c6f636b60781b6064820152608401610650565b600083116107f25760405162461bcd60e51b8152600401610650906124fe565b600082116108125760405162461bcd60e51b81526004016106509061254a565b8a5161082590609d9060208e019061209d565b50895161083990609e9060208d019061209d565b50609f80546001600160a01b03808c166001600160a01b03199283161790925560a08a905560a389905560a488905560a685905560a584905560a18054928716929091169190911790554387106108925760a354610894565b435b609a55609780546001600160a01b0319166001600160a01b038716179055600060988190556099819055609c819055609b556108ce611515565b80156108e0576000805461ff00191690555b5050505050505050505050565b6033546001600160a01b031633146109175760405162461bcd60e51b81526004016106509061247b565b6001600160a01b038216600090815260a260209081526040808320848452909152902080546109975760405162461bcd60e51b815260206004820152602660248201527f4e6f64655374616b696e67506f6f6c3a206e6f646520616c72656164792064696044820152651cd8589b195960d21b6064820152608401610650565b61099f611515565b8054156109ea576000816002015464e8d4a51000609b546109c091906125ac565b6109ca91906125ce565b905080156109e8578082600301546109e291906125e5565b60038301555b505b60008155609b54610a019064e8d4a51000906125ac565b6002820155609954610a15906001906125ce565b6099556001600160a01b038316600090815260a76020526040902054610a3d906001906125ce565b6001600160a01b03909316600090815260a760205260409020929092555050565b33600090815260a26020908152604080832085845290915290208054610a8390610d45565b610add5760405162461bcd60e51b815260206004820152602560248201527f4e6f64655374616b696e67506f6f6c3a206e6f7420696e2077697468647261776044820152642074696d6560d81b6064820152608401610650565b6000816001015411610b495760405162461bcd60e51b815260206004820152602f60248201527f4e6f64655374616b696e67506f6f6c3a2068617665206e6f7420616e7920746f60448201526e6b656e20746f20776974686472617760881b6064820152608401610650565b6001810154610b588484611767565b609754610b6f906001600160a01b03163383611828565b60408051338152602081018390527f8192939cba8c40f95bc122092011c559019ec5eeaf176bc2ebb2909316bf7623910160405180910390a150505050565b6033546001600160a01b03163314610bd85760405162461bcd60e51b81526004016106509061247b565b610be0611890565b565b6033546001600160a01b03163314610c0c5760405162461bcd60e51b81526004016106509061247b565b438411610c765760405162461bcd60e51b815260206004820152603260248201527f4e6f64655374616b696e67506f6f6c3a20656e6420626c6f636b206d7573742060448201527131329033ba10313637b1b597373ab6b132b960711b6064820152608401610650565b60008311610c965760405162461bcd60e51b8152600401610650906124fe565b60008211610cb65760405162461bcd60e51b81526004016106509061254a565b610cbe611515565b60a085815560a485905560a684905560a583905560a180546001600160a01b0319166001600160a01b03841690811790915560408051888152602081018890529081018690526060810185905260808101919091527f28e4b6ba2ad67ce04c3af634042aa5281ecc5d9534a01d47ec2c711dabc2e648910160405180910390a15050505050565b600080610d5283436125ce565b9050600060a55460a654610d6691906125e5565b610d7090836125ac565b9050600060a55460a654610d8491906125e5565b610d8e90836125fd565b610d9890846125ce565b60a654111595945050505050565b6033546001600160a01b03163314610dd05760405162461bcd60e51b81526004016106509061247b565b610be06000611923565b6033546001600160a01b03163314610e045760405162461bcd60e51b81526004016106509061247b565b610be0611975565b609e80546105a590612440565b6033546001600160a01b03163314610e435760405162461bcd60e51b81526004016106509061247b565b6001600160a01b038116610e695760405162461bcd60e51b81526004016106509061261c565b60a180546001600160a01b0319166001600160a01b0383169081179091556040519081527f07011b0b15512f533140457fca55819676a0497d4afe5c3d7a3524d951a0c4c89060200161068a565b60008060a454118015610ecb575060a45482115b15610ef5578260a45411610ee0576000610eee565b8260a454610eee91906125ce565b9050610f02565b610eff83836125ce565b90505b92915050565b600080610f17609a5443610eb7565b9050610f21611515565b33600081815260a260209081526040808320878452909152812091610f46908661161f565b60006003840155609b54909150610f639064e8d4a51000906125ac565b60028301556000610f758685846119f0565b90508115610f9057610f9033610f8b83856125ce565b611c5a565b33600090815260a96020908152604080832089845290915290206001810154431015610fc957610fc4338260000154611c5a565b600081555b8115611016578354610fda9061105a565b6001820155805482908290600090610ff39084906125e5565b90915550506001810154431061101657611011338260000154611c5a565b600081555b60408051338152602081018590527fc909a614430dd870655393d589db25896c60e5e9f85447cb19a437ddbb05eab1910160405180910390a1509095945050505050565b600081611068575043919050565b6110ba6040518060400160405280600b81526020016a1b5b33366d25731b5b306d60a81b8152506040518060400160405280600c81526020016b313637b1b597373ab6b132b960a11b81525043611d50565b61110a6040518060400160405280600b81526020016a1b5b33366d25731b5b306d60a81b8152506040518060400160405280600a8152602001695f737461727454696d6560b01b81525084611d50565b600061111683436125ce565b905061116e6040518060400160405280600b81526020016a1b5b33366d25731b5b306d60a81b8152506040518060400160405280600e81526020016d3637b1b5bab8223ab930ba34b7b760911b81525060a654611d50565b6111c46040518060400160405280600b81526020016a1b5b33366d25731b5b306d60a81b8152506040518060400160405280600e81526020016d1dda5d1a191c985dd4195c9a5bd960921b81525060a554611d50565b600060a55460a6546111d691906125e5565b6111e090836125ac565b90506112326040518060400160405280600b81526020016a1b5b33366d25731b5b306d60a81b8152506040518060400160405280600a81526020016936bab63a34b83634b2b960b11b81525083611d50565b60a55460a65461124291906125e5565b61124d8260016125e5565b61125791906125fd565b61126190856125e5565b949350505050565b6033546001600160a01b031633146112935760405162461bcd60e51b81526004016106509061247b565b6001600160a01b038216600090815260a26020908152604080832084845290915290208054156113135760405162461bcd60e51b815260206004820152602560248201527f4e6f64655374616b696e67506f6f6c3a206e6f646520616c726561647920656e60448201526418589b195960da1b6064820152608401610650565b61131b611515565b4381556001600160a01b038316600090815260a760205260409020546113429060016125e5565b6001600160a01b038416600090815260a760205260409020556099546113699060016125e5565b60995560408051338152602081018490527f9f5c381a77d6717003e7e9e8398484921af2bf9c87d29dc9655a059ff236434c91015b60405180910390a1505050565b6113b3611515565b60a08190556040518181527f22c0456177178fec69cb519ce05c0f0b39708187e616a82ceea49f84e19169cd9060200161068a565b6033546001600160a01b031633146114125760405162461bcd60e51b81526004016106509061247b565b4381116114315760405162461bcd60e51b81526004016106509061261c565b60a48190556040518181527f1132c5baccb51da3d049fabc819697dc845fa224ad59d9b555507d6446b408509060200161068a565b609c5433600090815260a8602052604081208054908261148583612667565b9091555033600090815260a260209081526040808320848452909152902060018101849055609854919250906114bc9084906125e5565b6098556097546114d7906001600160a01b0316333086611d97565b60408051338152602081018590529081018390527fb838602e00ba1ae3d80d6b2e623fc766c121b79cc8d3e3a97582ee6eeb2095599060600161139e565b609a54431161152057565b60995461152d5743609a55565b600061153b609a5443610eb7565b9050600060a0548261154d91906125fd565b60995490915061156264e8d4a51000836125fd565b61156c91906125ac565b609b5461157991906125e5565b609b55505043609a55565b6033546001600160a01b031633146115ae5760405162461bcd60e51b81526004016106509061247b565b6001600160a01b0381166116135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610650565b61161c81611923565b50565b6001600160a01b038216600090815260a2602090815260408083208484529091528120609b548154158015906116565750609a5443115b8015611663575060995415155b156116b6576000611676609a5443610eb7565b9050600060a0548261168891906125fd565b60995490915061169d64e8d4a51000836125fd565b6116a791906125ac565b6116b190846125e5565b925050505b60028201546116ca64e8d4a51000836125ac565b6116d491906125ce565b82600301546116e391906125e5565b95945050505050565b600054610100900460ff1680611705575060005460ff16155b6117215760405162461bcd60e51b8152600401610650906124b0565b600054610100900460ff16158015611743576000805461ffff19166101011790555b61174b611dd5565b611753611e3f565b801561161c576000805461ff001916905550565b33600090815260a26020908152604080832085845290915290206001810154821561179b5761179584610f08565b506117ee565b6117a3611515565b8154156117ee576000826002015464e8d4a51000609b546117c491906125ac565b6117ce91906125ce565b905080156117ec578083600301546117e691906125e5565b60038401555b505b6000600183018190558255609b5461180c9064e8d4a51000906125ac565b600283015560985461181f9082906125ce565b60985550505050565b6040516001600160a01b03831660248201526044810182905261188b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611e9f565b505050565b60655460ff166118d95760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610650565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff16156119bb5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610650565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119063390565b6000808311611a5c5760405162461bcd60e51b815260206004820152603260248201527f4e6f64655374616b696e67506f6f6c3a207374616b652074696d65206d75737460448201527102062652067726561746572207468616e20360741b6064820152608401610650565b33600090815260a26020908152604080832087845290915290208054611aea5760405162461bcd60e51b815260206004820152603760248201527f4e6f64655374616b696e67506f6f6c3a204e6f64655374616b696e67506f6f6c60448201527f3a206e6f646520616c72656164792064697361626c65640000000000000000006064820152608401610650565b6000611af98260000154610d45565b905080611b0b57600092505050611c53565b6000611b1a836000015461105a565b9050611b726040518060400160405280600b81526020016a1b5b33366d25731b5b306d60a81b8152506040518060400160405280600e81526020016d1dda5d1a191c985dd4195c9a5bd960921b81525060a554611d50565b611bc76040518060400160405280600b81526020016a1b5b33366d25731b5b306d60a81b8152506040518060400160405280600f81526020016e6e6578744c6f636b696e6754696d6560881b81525083611d50565b611c196040518060400160405280600b81526020016a1b5b33366d25731b5b306d60a81b8152506040518060400160405280600c81526020016b313637b1b597373ab6b132b960a11b81525043611d50565b6000611c2543836125ce565b60a554611c3291906125ce565b9050600087611c4188846125fd565b611c4b91906125ac565b955050505050505b9392505050565b609f5460a1546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa158015611cab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccf9190612682565b905080821115611d325760405162461bcd60e51b815260206004820152602860248201527f4e6f64655374616b696e67506f6f6c3a206e6f7420656e6f75676820726577616044820152673932103a37b5b2b760c11b6064820152608401610650565b60a154609f5461188b916001600160a01b0391821691168585611d97565b61188b838383604051602401611d689392919061269b565b60408051601f198184030181529190526020810180516001600160e01b031663f362ca5960e01b179052611f71565b6040516001600160a01b0380851660248301528316604482015260648101829052611dcf9085906323b872dd60e01b90608401611854565b50505050565b600054610100900460ff1680611dee575060005460ff16155b611e0a5760405162461bcd60e51b8152600401610650906124b0565b600054610100900460ff16158015611753576000805461ffff1916610101179055801561161c576000805461ff001916905550565b600054610100900460ff1680611e58575060005460ff16155b611e745760405162461bcd60e51b8152600401610650906124b0565b600054610100900460ff16158015611e96576000805461ffff19166101011790555b61175333611923565b6000611ef4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f929092919063ffffffff16565b80519091501561188b5780806020019051810190611f1291906126d1565b61188b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610650565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6060611261848460008585843b611feb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610650565b600080866001600160a01b0316858760405161200791906126ee565b60006040518083038185875af1925050503d8060008114612044576040519150601f19603f3d011682016040523d82523d6000602084013e612049565b606091505b5091509150612059828286612064565b979650505050505050565b60608315612073575081611c53565b8251156120835782518084602001fd5b8160405162461bcd60e51b8152600401610650919061218e565b8280546120a990612440565b90600052602060002090601f0160209004810192826120cb5760008555612111565b82601f106120e457805160ff1916838001178555612111565b82800160010185558215612111579182015b828111156121115782518255916020019190600101906120f6565b5061211d929150612121565b5090565b5b8082111561211d5760008155600101612122565b60005b83811015612151578181015183820152602001612139565b83811115611dcf5750506000910152565b6000815180845261217a816020860160208601612136565b601f01601f19169290920160200192915050565b602081526000610eff6020830184612162565b6001600160a01b038116811461161c57600080fd5b80356121c1816121a1565b919050565b6000602082840312156121d857600080fd5b8135611c53816121a1565b600080604083850312156121f657600080fd5b8235612201816121a1565b946020939093013593505050565b60006020828403121561222157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261224f57600080fd5b813567ffffffffffffffff8082111561226a5761226a612228565b604051601f8301601f19908116603f0116810190828211818310171561229257612292612228565b816040528381528660208588010111156122ab57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806000806000806000806101408b8d0312156122eb57600080fd5b8a3567ffffffffffffffff8082111561230357600080fd5b61230f8e838f0161223e565b9b5060208d013591508082111561232557600080fd5b506123328d828e0161223e565b99505061234160408c016121b6565b975060608b0135965060808b0135955060a08b0135945061236460c08c016121b6565b935061237260e08c016121b6565b92506101008b013591506101208b013590509295989b9194979a5092959850565b801515811461161c57600080fd5b600080604083850312156123b457600080fd5b8235915060208301356123c681612393565b809150509250929050565b600080600080600060a086880312156123e957600080fd5b853594506020860135935060408601359250606086013591506080860135612410816121a1565b809150509295509295909350565b6000806040838503121561243157600080fd5b50508035926020909101359150565b600181811c9082168061245457607f821691505b6020821081141561247557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602c908201527f4e6f64655374616b696e67506f6f6c3a206c6f636b75704475726174696f6e2060408201526b06d75737420626520677420360a41b606082015260800190565b6020808252602c908201527f4e6f64655374616b696e67506f6f6c3a207769746864726177506572696f642060408201526b06d75737420626520677420360a41b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000826125c957634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156125e0576125e0612596565b500390565b600082198211156125f8576125f8612596565b500190565b600081600019048311821515161561261757612617612596565b500290565b6020808252602b908201527f4e6f64655374616b696e67506f6f6c3a20696e76616c6964207265776172642060408201526a3234b9ba3934b13aba37b960a91b606082015260800190565b600060001982141561267b5761267b612596565b5060010190565b60006020828403121561269457600080fd5b5051919050565b6060815260006126ae6060830186612162565b82810360208401526126c08186612162565b915050826040830152949350505050565b6000602082840312156126e357600080fd5b8151611c5381612393565b60008251612700818460208701612136565b919091019291505056fea2646970667358221220edda32d0289c05748cafcc600873a7d7be43577f07992c1af6397cc69ed9865164736f6c634300080b0033a264697066735822122024aa5d9ddee2b944035c73eea351758b7f8e6c74273bc71a61f37bb882e5d75164736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638129fc1c1161008c578063ae7a774b11610066578063ae7a774b146101a7578063d238d82a146101c7578063efde4e64146101da578063f2fde38b146101e257600080fd5b80638129fc1c146101865780638456cb591461018e5780638da5cb5b1461019657600080fd5b80633f4ba83a146100d457806341d1de97146100de5780635c975abb1461010e578063715018a61461012457806375a466641461012c5780637fd376091461013f575b600080fd5b6100dc6101f5565b005b6100f16100ec366004610a23565b610232565b6040516001600160a01b0390911681526020015b60405180910390f35b60655460ff166040519015158152602001610105565b6100dc61025c565b6100f161013a366004610a58565b610290565b61017861014d366004610a94565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b604051908152602001610105565b6100dc6102d5565b6100dc610349565b6033546001600160a01b03166100f1565b6101ba6101b5366004610a94565b61037b565b6040516101059190610ac7565b6100f16101d5366004610bb7565b6103fe565b609754610178565b6100dc6101f0366004610c7f565b6106ed565b6033546001600160a01b031633146102285760405162461bcd60e51b815260040161021f90610ca1565b60405180910390fd5b610230610785565b565b6097818154811061024257600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b031633146102865760405162461bcd60e51b815260040161021f90610ca1565b6102306000610818565b609860205282600052604060002060205281600052604060002081815481106102b857600080fd5b6000918252602090912001546001600160a01b0316925083915050565b600054610100900460ff16806102ee575060005460ff16155b61030a5760405162461bcd60e51b815260040161021f90610cd6565b600054610100900460ff1615801561032c576000805461ffff19166101011790555b61033461086a565b8015610346576000805461ff00191690555b50565b6033546001600160a01b031633146103735760405162461bcd60e51b815260040161021f90610ca1565b6102306108d1565b6001600160a01b0380831660009081526098602090815260408083209385168352928152908290208054835181840281018401909452808452606093928301828280156103f157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103d3575b5050505050905092915050565b600061040c60655460ff1690565b1561044c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161021f565b6001600160a01b0385166104725760405162461bcd60e51b815260040161021f90610d24565b6001600160a01b0389166104985760405162461bcd60e51b815260040161021f90610d24565b6000604051806020016104aa90610a16565b601f1982820381018352601f909101166040908152336000908152609860209081528282206001600160a01b038f168352905290812054919250906040516bffffffffffffffffffffffff1933606090811b821660208401528e901b16603482015260488101829052909150600090606801604051602081830303815290604052805190602001209050808351602085016000f59350836001600160a01b031663438491e78f8f8f8f8f8f8f8f8f8f6040518b63ffffffff1660e01b815260040161057e9a99989796959493929190610dbf565b600060405180830381600087803b15801561059857600080fd5b505af11580156105ac573d6000803e3d6000fd5b5050505060986000336001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b031602179055506097849080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b031602179055507fff8439967133b164db4c57586583a2881ff16a2c0046a9bc709f0ff6a9805d02338f8f8f8c8960016097805490506106c19190610e37565b6040516106d49796959493929190610e5c565b60405180910390a15050509a9950505050505050505050565b6033546001600160a01b031633146107175760405162461bcd60e51b815260040161021f90610ca1565b6001600160a01b03811661077c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161021f565b61034681610818565b60655460ff166107ce5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161021f565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680610883575060005460ff16155b61089f5760405162461bcd60e51b815260040161021f90610cd6565b600054610100900460ff161580156108c1576000805461ffff19166101011790555b6108c961094c565b6103346109b6565b60655460ff16156109175760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161021f565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586107fb3390565b600054610100900460ff1680610965575060005460ff16155b6109815760405162461bcd60e51b815260040161021f90610cd6565b600054610100900460ff16158015610334576000805461ffff19166101011790558015610346576000805461ff001916905550565b600054610100900460ff16806109cf575060005460ff16155b6109eb5760405162461bcd60e51b815260040161021f90610cd6565b600054610100900460ff16158015610a0d576000805461ffff19166101011790555b61033433610818565b61276080610eb783390190565b600060208284031215610a3557600080fd5b5035919050565b80356001600160a01b0381168114610a5357600080fd5b919050565b600080600060608486031215610a6d57600080fd5b610a7684610a3c565b9250610a8460208501610a3c565b9150604084013590509250925092565b60008060408385031215610aa757600080fd5b610ab083610a3c565b9150610abe60208401610a3c565b90509250929050565b6020808252825182820181905260009190848201906040850190845b81811015610b085783516001600160a01b031683529284019291840191600101610ae3565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610b3b57600080fd5b813567ffffffffffffffff80821115610b5657610b56610b14565b604051601f8301601f19908116603f01168101908282118183101715610b7e57610b7e610b14565b81604052838152866020858801011115610b9757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806000806000806000806101408b8d031215610bd757600080fd5b8a3567ffffffffffffffff80821115610bef57600080fd5b610bfb8e838f01610b2a565b9b5060208d0135915080821115610c1157600080fd5b50610c1e8d828e01610b2a565b995050610c2d60408c01610a3c565b975060608b0135965060808b0135955060a08b01359450610c5060c08c01610a3c565b935060e08b013592506101008b01359150610c6e6101208c01610a3c565b90509295989b9194979a5092959850565b600060208284031215610c9157600080fd5b610c9a82610a3c565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602e908201527f4e6f64655374616b696e67506f6f6c466163746f72793a206e6f7420616c6c6f60408201526d77207a65726f206164647265737360901b606082015260800190565b6000815180845260005b81811015610d9857602081850181015186830182015201610d7c565b81811115610daa576000602083870101525b50601f01601f19169290920160200192915050565b6000610140808352610dd38184018e610d72565b90508281036020840152610de7818d610d72565b6001600160a01b039b8c166040850152606084019a909a525050608081019690965260a086019490945291861660c085015260e08401526101008301529092166101209092019190915292915050565b600082821015610e5757634e487b7160e01b600052601160045260246000fd5b500390565b600060018060a01b03808a16835260e06020840152610e7e60e084018a610d72565b8381036040850152610e90818a610d72565b9782166060850152509485166080830152509190921660a082015260c00152939250505056fe608060405234801561001057600080fd5b50612740806100206000396000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c80638ae39cac11610146578063b4569228116100c3578063e2c0fa9811610087578063e2c0fa981461052e578063e3161ddd1461054e578063ec4ed27314610556578063f2fde38b1461055f578063f430cf0d14610572578063f7c618c11461058557600080fd5b8063b4569228146104e4578063b4999e85146104f7578063bb872b4a14610500578063c713aa9414610513578063d0e30db01461052657600080fd5b8063a9f8d1811161010a578063a9f8d1811461048f578063aa55609514610498578063acc2166a146104ab578063ae169a50146104be578063b39426a1146104d157600080fd5b80638ae39cac146104515780638da5cb5b1461045a578063939d62371461046b57806395d89b4114610474578063a1809b951461047c57600080fd5b806338d07436116101df57806351ed6a30116101a357806351ed6a30146103ec5780635c975abb14610417578063633bc8bd1461042e578063715018a614610441578063771ff381146103465780638456cb591461044957600080fd5b806338d074361461036e5780633e5a9b11146103815780633f4ba83a146103c85780634774be74146103d0578063498a4c2d146103e357600080fd5b8063215f9baa11610226578063215f9baa146102b357806321ce919d146102d3578063243b442614610333578063251ea859146103485780632b2739e61461035b57600080fd5b806306fdde031461026357806310c640b81461028157806312eb4f9a146102985780631310dce9146102a15780631ada70a8146102aa575b600080fd5b61026b610598565b604051610278919061218e565b60405180910390f35b61028a60985481565b604051908152602001610278565b61028a60a55481565b61028a60995481565b61028a60a65481565b61028a6102c13660046121c6565b60a86020526000908152604090205481565b6103136102e13660046121e3565b60a260209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610278565b61034661034136600461220f565b610626565b005b6103466103563660046122cb565b610695565b6103466103693660046121e3565b6108ed565b61034661037c3660046123a1565b610a5e565b6103b361038f3660046121e3565b60a96020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610278565b610346610bae565b6103466103de3660046123d1565b610be2565b61028a60a35481565b6097546103ff906001600160a01b031681565b6040516001600160a01b039091168152602001610278565b60655460ff165b6040519015158152602001610278565b61041e61043c36600461220f565b610d45565b610346610da6565b610346610dda565b61028a60a05481565b6033546001600160a01b03166103ff565b61028a609b5481565b61026b610e0c565b61034661048a3660046121c6565b610e19565b61028a609a5481565b61028a6104a636600461241e565b610eb7565b60a1546103ff906001600160a01b031681565b61028a6104cc36600461220f565b610f08565b61028a6104df36600461220f565b61105a565b6103466104f23660046121e3565b611269565b61028a60a45481565b61034661050e36600461220f565b6113ab565b61034661052136600461220f565b6113e8565b610346611466565b61028a61053c3660046121c6565b60a76020526000908152604090205481565b610346611515565b61028a609c5481565b61034661056d3660046121c6565b611584565b61028a6105803660046121e3565b61161f565b609f546103ff906001600160a01b031681565b609d80546105a590612440565b80601f01602080910402602001604051908101604052809291908181526020018280546105d190612440565b801561061e5780601f106105f35761010080835404028352916020019161061e565b820191906000526020600020905b81548152906001019060200180831161060157829003601f168201915b505050505081565b6033546001600160a01b031633146106595760405162461bcd60e51b81526004016106509061247b565b60405180910390fd5b609c8190556040518181527fb3ec819eca7ad857fe0ac22af97db0cf5710cc80aa43f6c10cb8d7e96f30ff27906020015b60405180910390a150565b600054610100900460ff16806106ae575060005460ff16155b6106ca5760405162461bcd60e51b8152600401610650906124b0565b600054610100900460ff161580156106ec576000805461ffff19166101011790555b6106f46116ec565b6106fd32611584565b6001600160a01b0389166107695760405162461bcd60e51b815260206004820152602d60248201527f4e6f64655374616b696e67506f6f6c3a20696e76616c6964207265776172642060448201526c746f6b656e206164647265737360981b6064820152608401610650565b8587106107d25760405162461bcd60e51b815260206004820152603160248201527f4e6f64655374616b696e67506f6f6c3a20696e76616c696420737461727420626044820152706c6f636b206f7220656e6420626c6f636b60781b6064820152608401610650565b600083116107f25760405162461bcd60e51b8152600401610650906124fe565b600082116108125760405162461bcd60e51b81526004016106509061254a565b8a5161082590609d9060208e019061209d565b50895161083990609e9060208d019061209d565b50609f80546001600160a01b03808c166001600160a01b03199283161790925560a08a905560a389905560a488905560a685905560a584905560a18054928716929091169190911790554387106108925760a354610894565b435b609a55609780546001600160a01b0319166001600160a01b038716179055600060988190556099819055609c819055609b556108ce611515565b80156108e0576000805461ff00191690555b5050505050505050505050565b6033546001600160a01b031633146109175760405162461bcd60e51b81526004016106509061247b565b6001600160a01b038216600090815260a260209081526040808320848452909152902080546109975760405162461bcd60e51b815260206004820152602660248201527f4e6f64655374616b696e67506f6f6c3a206e6f646520616c72656164792064696044820152651cd8589b195960d21b6064820152608401610650565b61099f611515565b8054156109ea576000816002015464e8d4a51000609b546109c091906125ac565b6109ca91906125ce565b905080156109e8578082600301546109e291906125e5565b60038301555b505b60008155609b54610a019064e8d4a51000906125ac565b6002820155609954610a15906001906125ce565b6099556001600160a01b038316600090815260a76020526040902054610a3d906001906125ce565b6001600160a01b03909316600090815260a760205260409020929092555050565b33600090815260a26020908152604080832085845290915290208054610a8390610d45565b610add5760405162461bcd60e51b815260206004820152602560248201527f4e6f64655374616b696e67506f6f6c3a206e6f7420696e2077697468647261776044820152642074696d6560d81b6064820152608401610650565b6000816001015411610b495760405162461bcd60e51b815260206004820152602f60248201527f4e6f64655374616b696e67506f6f6c3a2068617665206e6f7420616e7920746f60448201526e6b656e20746f20776974686472617760881b6064820152608401610650565b6001810154610b588484611767565b609754610b6f906001600160a01b03163383611828565b60408051338152602081018390527f8192939cba8c40f95bc122092011c559019ec5eeaf176bc2ebb2909316bf7623910160405180910390a150505050565b6033546001600160a01b03163314610bd85760405162461bcd60e51b81526004016106509061247b565b610be0611890565b565b6033546001600160a01b03163314610c0c5760405162461bcd60e51b81526004016106509061247b565b438411610c765760405162461bcd60e51b815260206004820152603260248201527f4e6f64655374616b696e67506f6f6c3a20656e6420626c6f636b206d7573742060448201527131329033ba10313637b1b597373ab6b132b960711b6064820152608401610650565b60008311610c965760405162461bcd60e51b8152600401610650906124fe565b60008211610cb65760405162461bcd60e51b81526004016106509061254a565b610cbe611515565b60a085815560a485905560a684905560a583905560a180546001600160a01b0319166001600160a01b03841690811790915560408051888152602081018890529081018690526060810185905260808101919091527f28e4b6ba2ad67ce04c3af634042aa5281ecc5d9534a01d47ec2c711dabc2e648910160405180910390a15050505050565b600080610d5283436125ce565b9050600060a55460a654610d6691906125e5565b610d7090836125ac565b9050600060a55460a654610d8491906125e5565b610d8e90836125fd565b610d9890846125ce565b60a654111595945050505050565b6033546001600160a01b03163314610dd05760405162461bcd60e51b81526004016106509061247b565b610be06000611923565b6033546001600160a01b03163314610e045760405162461bcd60e51b81526004016106509061247b565b610be0611975565b609e80546105a590612440565b6033546001600160a01b03163314610e435760405162461bcd60e51b81526004016106509061247b565b6001600160a01b038116610e695760405162461bcd60e51b81526004016106509061261c565b60a180546001600160a01b0319166001600160a01b0383169081179091556040519081527f07011b0b15512f533140457fca55819676a0497d4afe5c3d7a3524d951a0c4c89060200161068a565b60008060a454118015610ecb575060a45482115b15610ef5578260a45411610ee0576000610eee565b8260a454610eee91906125ce565b9050610f02565b610eff83836125ce565b90505b92915050565b600080610f17609a5443610eb7565b9050610f21611515565b33600081815260a260209081526040808320878452909152812091610f46908661161f565b60006003840155609b54909150610f639064e8d4a51000906125ac565b60028301556000610f758685846119f0565b90508115610f9057610f9033610f8b83856125ce565b611c5a565b33600090815260a96020908152604080832089845290915290206001810154431015610fc957610fc4338260000154611c5a565b600081555b8115611016578354610fda9061105a565b6001820155805482908290600090610ff39084906125e5565b90915550506001810154431061101657611011338260000154611c5a565b600081555b60408051338152602081018590527fc909a614430dd870655393d589db25896c60e5e9f85447cb19a437ddbb05eab1910160405180910390a1509095945050505050565b600081611068575043919050565b6110ba6040518060400160405280600b81526020016a1b5b33366d25731b5b306d60a81b8152506040518060400160405280600c81526020016b313637b1b597373ab6b132b960a11b81525043611d50565b61110a6040518060400160405280600b81526020016a1b5b33366d25731b5b306d60a81b8152506040518060400160405280600a8152602001695f737461727454696d6560b01b81525084611d50565b600061111683436125ce565b905061116e6040518060400160405280600b81526020016a1b5b33366d25731b5b306d60a81b8152506040518060400160405280600e81526020016d3637b1b5bab8223ab930ba34b7b760911b81525060a654611d50565b6111c46040518060400160405280600b81526020016a1b5b33366d25731b5b306d60a81b8152506040518060400160405280600e81526020016d1dda5d1a191c985dd4195c9a5bd960921b81525060a554611d50565b600060a55460a6546111d691906125e5565b6111e090836125ac565b90506112326040518060400160405280600b81526020016a1b5b33366d25731b5b306d60a81b8152506040518060400160405280600a81526020016936bab63a34b83634b2b960b11b81525083611d50565b60a55460a65461124291906125e5565b61124d8260016125e5565b61125791906125fd565b61126190856125e5565b949350505050565b6033546001600160a01b031633146112935760405162461bcd60e51b81526004016106509061247b565b6001600160a01b038216600090815260a26020908152604080832084845290915290208054156113135760405162461bcd60e51b815260206004820152602560248201527f4e6f64655374616b696e67506f6f6c3a206e6f646520616c726561647920656e60448201526418589b195960da1b6064820152608401610650565b61131b611515565b4381556001600160a01b038316600090815260a760205260409020546113429060016125e5565b6001600160a01b038416600090815260a760205260409020556099546113699060016125e5565b60995560408051338152602081018490527f9f5c381a77d6717003e7e9e8398484921af2bf9c87d29dc9655a059ff236434c91015b60405180910390a1505050565b6113b3611515565b60a08190556040518181527f22c0456177178fec69cb519ce05c0f0b39708187e616a82ceea49f84e19169cd9060200161068a565b6033546001600160a01b031633146114125760405162461bcd60e51b81526004016106509061247b565b4381116114315760405162461bcd60e51b81526004016106509061261c565b60a48190556040518181527f1132c5baccb51da3d049fabc819697dc845fa224ad59d9b555507d6446b408509060200161068a565b609c5433600090815260a8602052604081208054908261148583612667565b9091555033600090815260a260209081526040808320848452909152902060018101849055609854919250906114bc9084906125e5565b6098556097546114d7906001600160a01b0316333086611d97565b60408051338152602081018590529081018390527fb838602e00ba1ae3d80d6b2e623fc766c121b79cc8d3e3a97582ee6eeb2095599060600161139e565b609a54431161152057565b60995461152d5743609a55565b600061153b609a5443610eb7565b9050600060a0548261154d91906125fd565b60995490915061156264e8d4a51000836125fd565b61156c91906125ac565b609b5461157991906125e5565b609b55505043609a55565b6033546001600160a01b031633146115ae5760405162461bcd60e51b81526004016106509061247b565b6001600160a01b0381166116135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610650565b61161c81611923565b50565b6001600160a01b038216600090815260a2602090815260408083208484529091528120609b548154158015906116565750609a5443115b8015611663575060995415155b156116b6576000611676609a5443610eb7565b9050600060a0548261168891906125fd565b60995490915061169d64e8d4a51000836125fd565b6116a791906125ac565b6116b190846125e5565b925050505b60028201546116ca64e8d4a51000836125ac565b6116d491906125ce565b82600301546116e391906125e5565b95945050505050565b600054610100900460ff1680611705575060005460ff16155b6117215760405162461bcd60e51b8152600401610650906124b0565b600054610100900460ff16158015611743576000805461ffff19166101011790555b61174b611dd5565b611753611e3f565b801561161c576000805461ff001916905550565b33600090815260a26020908152604080832085845290915290206001810154821561179b5761179584610f08565b506117ee565b6117a3611515565b8154156117ee576000826002015464e8d4a51000609b546117c491906125ac565b6117ce91906125ce565b905080156117ec578083600301546117e691906125e5565b60038401555b505b6000600183018190558255609b5461180c9064e8d4a51000906125ac565b600283015560985461181f9082906125ce565b60985550505050565b6040516001600160a01b03831660248201526044810182905261188b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611e9f565b505050565b60655460ff166118d95760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610650565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff16156119bb5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610650565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119063390565b6000808311611a5c5760405162461bcd60e51b815260206004820152603260248201527f4e6f64655374616b696e67506f6f6c3a207374616b652074696d65206d75737460448201527102062652067726561746572207468616e20360741b6064820152608401610650565b33600090815260a26020908152604080832087845290915290208054611aea5760405162461bcd60e51b815260206004820152603760248201527f4e6f64655374616b696e67506f6f6c3a204e6f64655374616b696e67506f6f6c60448201527f3a206e6f646520616c72656164792064697361626c65640000000000000000006064820152608401610650565b6000611af98260000154610d45565b905080611b0b57600092505050611c53565b6000611b1a836000015461105a565b9050611b726040518060400160405280600b81526020016a1b5b33366d25731b5b306d60a81b8152506040518060400160405280600e81526020016d1dda5d1a191c985dd4195c9a5bd960921b81525060a554611d50565b611bc76040518060400160405280600b81526020016a1b5b33366d25731b5b306d60a81b8152506040518060400160405280600f81526020016e6e6578744c6f636b696e6754696d6560881b81525083611d50565b611c196040518060400160405280600b81526020016a1b5b33366d25731b5b306d60a81b8152506040518060400160405280600c81526020016b313637b1b597373ab6b132b960a11b81525043611d50565b6000611c2543836125ce565b60a554611c3291906125ce565b9050600087611c4188846125fd565b611c4b91906125ac565b955050505050505b9392505050565b609f5460a1546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa158015611cab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccf9190612682565b905080821115611d325760405162461bcd60e51b815260206004820152602860248201527f4e6f64655374616b696e67506f6f6c3a206e6f7420656e6f75676820726577616044820152673932103a37b5b2b760c11b6064820152608401610650565b60a154609f5461188b916001600160a01b0391821691168585611d97565b61188b838383604051602401611d689392919061269b565b60408051601f198184030181529190526020810180516001600160e01b031663f362ca5960e01b179052611f71565b6040516001600160a01b0380851660248301528316604482015260648101829052611dcf9085906323b872dd60e01b90608401611854565b50505050565b600054610100900460ff1680611dee575060005460ff16155b611e0a5760405162461bcd60e51b8152600401610650906124b0565b600054610100900460ff16158015611753576000805461ffff1916610101179055801561161c576000805461ff001916905550565b600054610100900460ff1680611e58575060005460ff16155b611e745760405162461bcd60e51b8152600401610650906124b0565b600054610100900460ff16158015611e96576000805461ffff19166101011790555b61175333611923565b6000611ef4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f929092919063ffffffff16565b80519091501561188b5780806020019051810190611f1291906126d1565b61188b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610650565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6060611261848460008585843b611feb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610650565b600080866001600160a01b0316858760405161200791906126ee565b60006040518083038185875af1925050503d8060008114612044576040519150601f19603f3d011682016040523d82523d6000602084013e612049565b606091505b5091509150612059828286612064565b979650505050505050565b60608315612073575081611c53565b8251156120835782518084602001fd5b8160405162461bcd60e51b8152600401610650919061218e565b8280546120a990612440565b90600052602060002090601f0160209004810192826120cb5760008555612111565b82601f106120e457805160ff1916838001178555612111565b82800160010185558215612111579182015b828111156121115782518255916020019190600101906120f6565b5061211d929150612121565b5090565b5b8082111561211d5760008155600101612122565b60005b83811015612151578181015183820152602001612139565b83811115611dcf5750506000910152565b6000815180845261217a816020860160208601612136565b601f01601f19169290920160200192915050565b602081526000610eff6020830184612162565b6001600160a01b038116811461161c57600080fd5b80356121c1816121a1565b919050565b6000602082840312156121d857600080fd5b8135611c53816121a1565b600080604083850312156121f657600080fd5b8235612201816121a1565b946020939093013593505050565b60006020828403121561222157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261224f57600080fd5b813567ffffffffffffffff8082111561226a5761226a612228565b604051601f8301601f19908116603f0116810190828211818310171561229257612292612228565b816040528381528660208588010111156122ab57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806000806000806000806101408b8d0312156122eb57600080fd5b8a3567ffffffffffffffff8082111561230357600080fd5b61230f8e838f0161223e565b9b5060208d013591508082111561232557600080fd5b506123328d828e0161223e565b99505061234160408c016121b6565b975060608b0135965060808b0135955060a08b0135945061236460c08c016121b6565b935061237260e08c016121b6565b92506101008b013591506101208b013590509295989b9194979a5092959850565b801515811461161c57600080fd5b600080604083850312156123b457600080fd5b8235915060208301356123c681612393565b809150509250929050565b600080600080600060a086880312156123e957600080fd5b853594506020860135935060408601359250606086013591506080860135612410816121a1565b809150509295509295909350565b6000806040838503121561243157600080fd5b50508035926020909101359150565b600181811c9082168061245457607f821691505b6020821081141561247557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602c908201527f4e6f64655374616b696e67506f6f6c3a206c6f636b75704475726174696f6e2060408201526b06d75737420626520677420360a41b606082015260800190565b6020808252602c908201527f4e6f64655374616b696e67506f6f6c3a207769746864726177506572696f642060408201526b06d75737420626520677420360a41b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000826125c957634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156125e0576125e0612596565b500390565b600082198211156125f8576125f8612596565b500190565b600081600019048311821515161561261757612617612596565b500290565b6020808252602b908201527f4e6f64655374616b696e67506f6f6c3a20696e76616c6964207265776172642060408201526a3234b9ba3934b13aba37b960a91b606082015260800190565b600060001982141561267b5761267b612596565b5060010190565b60006020828403121561269457600080fd5b5051919050565b6060815260006126ae6060830186612162565b82810360208401526126c08186612162565b915050826040830152949350505050565b6000602082840312156126e357600080fd5b8151611c5381612393565b60008251612700818460208701612136565b919091019291505056fea2646970667358221220edda32d0289c05748cafcc600873a7d7be43577f07992c1af6397cc69ed9865164736f6c634300080b0033a264697066735822122024aa5d9ddee2b944035c73eea351758b7f8e6c74273bc71a61f37bb882e5d75164736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allPoolsLength()": {
        "returns": {
          "_0": "Return number of created pools"
        }
      },
      "getCreatedPoolsByToken(address,address)": {
        "details": "User can retrieve their created pool by address of tokens",
        "params": {
          "_creator": "Address of created pool user",
          "_token": "Address of token want to query"
        },
        "returns": {
          "_0": "Created NodeStakingPool Address"
        }
      },
      "getCreatedPoolsLengthByToken(address,address)": {
        "params": {
          "_creator": "Address of created pool user",
          "_token": "Address of token want to query"
        },
        "returns": {
          "_0": "Return number of created pool"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "registerPool(string,string,address,uint256,uint256,uint256,address,uint256,uint256,address)": {
        "details": "To register, you MUST have an ERC20 token"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allPoolsLength()": {
        "notice": "Get the number of all created pools"
      },
      "getCreatedPoolsByToken(address,address)": {
        "notice": "Get the created pools by token address"
      },
      "getCreatedPoolsLengthByToken(address,address)": {
        "notice": "Retrieve number of pools created for specific token"
      },
      "pause()": {
        "notice": "Pause contract"
      },
      "registerPool(string,string,address,uint256,uint256,uint256,address,uint256,uint256,address)": {
        "notice": "Register NodeStakingPool for tokens"
      },
      "unpause()": {
        "notice": "Unpause contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/NodeStakingFactory.sol:NodeStakingPoolFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/NodeStakingFactory.sol:NodeStakingPoolFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1001,
        "contract": "contracts/NodeStakingFactory.sol:NodeStakingPoolFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/NodeStakingFactory.sol:NodeStakingPoolFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/NodeStakingFactory.sol:NodeStakingPoolFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 191,
        "contract": "contracts/NodeStakingFactory.sol:NodeStakingPoolFactory",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 282,
        "contract": "contracts/NodeStakingFactory.sol:NodeStakingPoolFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3937,
        "contract": "contracts/NodeStakingFactory.sol:NodeStakingPoolFactory",
        "label": "allPools",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3944,
        "contract": "contracts/NodeStakingFactory.sol:NodeStakingPoolFactory",
        "label": "getPools",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}